name: Continuous Integration

on: [push, pull_request]

defaults:
  run:
    shell: bash

concurrency:
  group: ci-tests-${{ github.ref }}-1
  cancel-in-progress: true
  
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-11, windows-2019]
        python-version: [ "3.6", "3.7", "3.8", "3.9", "3.10", "3.11", "3.12.0-rc.1", "pypy3.8", "pypy3.9", "pypy3.10", ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Print Python Information
        run: python -VV
      - name: install TinyTeX
        uses: r-lib/actions/setup-tinytex@v2
      - name: Install and configure Poetry
        run: |
          pip3 install poetry
          poetry config virtualenvs.in-project true
      - name: Set up cache
        uses: actions/cache@v3
        id: cached-poetry-dependencies
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: Download pandoc
        run: poetry run python setup_binary.py download_pandoc
      - name: run tests
        run: poetry run python tests.py

  builder_pypandoc:
    needs: [test]
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-20.04  # Any OS is fine as this wheel is not OS dependent
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9  # Build any 1 python version as this wheel is not version dependent
      - name: Update dependencies
        run: python -m pip install -U pip wheel setuptools
      - name: Build wheel
        run: python setup.py sdist bdist_wheel
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

  builder_pypandoc_binary:
    needs: [test]
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        # Ref: https://cibuildwheel.readthedocs.io/en/stable/options/#archs
        # macos-11     - Creates macosx_x86_64
        # windows-2019 - Creates {win_amd64,win32}
        # ubuntu-20.04 - Creates {manylinux,musllinux}_{x86_64,i686}
        #                In CIBW_SKIP we skip 32bit linux
        os: [macos-11, windows-2019, ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Remove pyproject and use setuptools
        run: rm pyproject.toml
      - name: Build binary Archive
        uses: pypa/cibuildwheel@v2.9.0
        env:
          CIBW_BEFORE_ALL: "mv setup_binary.py setup.py && python3 setup.py download_pandoc"
          CIBW_BUILD: cp39-*  # Build any 1 python version as this wheel is not version dependent
          # We skip some variants because:
          # - pandoc does not publish binaries for Linux 32bit
          CIBW_SKIP: "*-{manylinux_i686,musllinux_i686}"
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: wheelhouse/

  publisher_release:
    needs: [builder_pypandoc, builder_pypandoc_binary]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish  to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

  publisher_latest:
    needs: [builder_pypandoc, builder_pypandoc_binary]
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
      - name: Make release
        uses: "marvinpinto/action-automatic-releases@v1.2.1"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: true
          title: "Latest Development Version"
          automatic_release_tag: "latest"
          files: dist/*
